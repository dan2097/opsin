<!DOCTYPE regexes SYSTEM "regexes.dtd">
<regexes>
<!-- These define the basic grammar of chemical words. These build the single-letter
codes found in regexTokens and the other tokenlist files into a large regular
expression, which is used in parsing.

Note that this is NOT a CFG! This file is read entry by entry, building up
a dictionary of the translated form of each term as it goes. This has
the consquence that if you want to use a term, you must define it in a previous
<regex> first. Note that this disallows recursive definitions, and hence this
does not define a CFG.
 -->

<!-- base level regexes, a mirror of the token files -->
  <regex name="%alkaneStem%" value="a"/>
  <regex name="%irregularAlkaneStem%" value="A"/>
  <regex name="%alkanen%" value="n"/>
  <regex name="%suffix%" value="s"/>
  <regex name="%unsaturator%" value="u"/>
  <regex name="%inlineSuffix%" value="i"/>
  <regex name="%simpleSubstituent%" value="x"/>
  <regex name="%simpleMultiplier%" value="m"/>
  <regex name="%elidedAMultiplier%" value="r"/>
  <regex name="%groupMultiplier%" value="R"/>
  <regex name="%groupStemAllowingInlineSuffixes%" value="g"/>
  <regex name="%simpleGroup%" value="G"/>
  <regex name="%locantGroup%" value="l"/>
  <regex name="%hyphen%" value="h"/>
  <regex name="%openBracket%" value="o"/>
  <regex name="%closeBracket%" value="c"/>
  <regex name="%acidStem%" value="d"/>
  <regex name="%trivialRingSubstituent%" value="b"/>
  <regex name="%cyclo%" value="C"/>
  <regex name="%vonBaeyer%" value="B"/>
  <regex name="%spiro%" value="S"/>
  <regex name="%heteroAtom%" value="H"/>
  <regex name="%heteroAtomaElided%" value="v"/>
  <regex name="%hantzschWidmanSuffix%" value="W"/>
  <regex name="%trivialRing%" value="z"/>
  <regex name="%fusionRing%" value="f"/>
  <regex name="%fusionBracket%" value="F"/>
  <regex name="%hydro%" value="y"/>
  <regex name="%bigCapitalH%" value="e"/>
  <regex name="%annulen%" value="N"/>
  <regex name="%orthoMetaPara%" value="O"/>
  <regex name="%stereochemistryBracket%" value="E"/>
  <regex name="%cisOrTrans%" value="t"/>
  <regex name="%heteroStem%" value="p"/>
  <regex name="%o%" value="Y"/>
  <regex name="%e%" value="Z"/>
  <regex name="%inlineChargeSuffix%" value="I"/>
  <regex name="%suffixableSubstituent%" value="X"/>
  <regex name="%hwHeteroAtom%" value="D"/>
  <regex name="%optionalOpenBracket%" value="T"/>
  <regex name="%optionalCloseBracket%" value="U"/>
  <regex name="%hwAneCompatible%" value="j"/>
  <regex name="%hwIneCompatible%" value="J"/>
  <regex name="%hwAne%" value="k"/>
  <regex name="%hwIne%" value="K"/>
  <regex name="%ringAssemblyMultiplier%" value="P"/>
  <regex name="%ringAssemblyLocant%" value="L"/>
  <regex name="%vonBaeyerMultiplier%" value="M"/>
  <regex name="%structuralOpenBracket%" value="q"/>
  <regex name="%structuralCloseBracket%" value="Q"/>
  <regex name="%repeatableInlineSuffix%" value="w"/>
  <regex name="%FR2hydrocarbonComponent%" value="V"/>
  <regex name="%lambdaConvention%" value="Ç"/>
  <regex name="%replacementInfix%" value="ü"/>
  <regex name="%endOfSubstituent%" value="é"/>
  <regex name="%endOfMainGroup%" value="â"/>
  <regex name="%interSubstituentHyphen%" value="ä"/>
  <regex name="%ane%" value="à"/>
  <regex name="%suffixesThatCanHaveEeuphonicO%" value="å"/>
  <regex name="%comma%" value="ç"/>
  <regex name="%groupStemAllowingAllSuffixes%" value="ê"/>
  <!--up to ascii 136 used -->

<!-- composite regexes
	Note that %substituent% and %chemical% are reserved words: don't change these.
 -->

<!-- UsefulTerms-->
  <regex name="%rootSuffix%" value="(%suffix%|%suffixesThatCanHaveEeuphonicO%)"/>
  <regex name="%multiplier%" value="((%simpleMultiplier%|%elidedAMultiplier%|%groupMultiplier%)%hyphen%?)"/>
  <regex name="%simpleMultiplierGroup%" value="(%simpleMultiplier%%hyphen%?)"/>
  <regex name="%stereochemistry%" value="((%stereochemistryBracket%|(%locantGroup%?%cisOrTrans%)(%comma%%locantGroup%?%cisOrTrans%)*)%hyphen%?)"/>
  <regex name="%newLocantGroupNoOMP%" value="(%hyphen%?%locantGroup%?)"/>
  <regex name="%newLocantGroup%" value="(%hyphen%?(%locantGroup%|%orthoMetaPara%)?)"/>
  <regex name="%newLocantGroupNoStartingHyphen%" value="(%locantGroup%|%orthoMetaPara%)"/><!--Substituents/mainGroups may not start with a hyphen (otherwise it is ambiguous as to where to break up the name so this is used for prefixes-->
  <regex name="%infixedInlineSuffix%" value="(%o%?%replacementInfix%%o%?%inlineSuffix%|%structuralOpenBracket%%multiplier%?%replacementInfix%%o%?%inlineSuffix%%structuralCloseBracket%)"/>
  <regex name="%unlocantedInlineSuffixGroup%" value="(%simpleMultiplierGroup%?(%infixedInlineSuffix%|%inlineSuffix%))"/>
  <regex name="%inlineSuffixGroup%" value="(%newLocantGroup%?%unlocantedInlineSuffixGroup%)"/>
  <regex name="%repeatableInlineSuffixGroup%" value="(%newLocantGroup%?%simpleMultiplierGroup%?%repeatableInlineSuffix%)"/>
  <regex name="%inlineChargeGroup%" value="(%newLocantGroup%?%multiplier%?%inlineChargeSuffix%)"/>
  <regex name="%inlineEndings%" value="(%inlineChargeGroup%*%inlineSuffixGroup%%repeatableInlineSuffixGroup%*)"/>
  <regex name="%unsaturation%" value="(%newLocantGroupNoOMP%?%multiplier%?%unsaturator%)"/>
  <regex name="%unsaturationBlock%" value="((%hyphen%?%ane%|%unsaturation%)%unsaturation%*)"/>
  <regex name="%heteroReplacement%" value="((%newLocantGroupNoStartingHyphen%?%multiplier%|(%locantGroup%?|%lambdaConvention%)%multiplier%?)%heteroAtom%%hyphen%?)"/>
  <regex name="%hydroGroup%" value="(%locantGroup%?%multiplier%%hydro%%hyphen%?)"/>
  <regex name="%infixedSuffix%" value="((%o%?%replacementInfix%((%o%?%suffix%)|%suffixesThatCanHaveEeuphonicO%))|(%structuralOpenBracket%%multiplier%?%replacementInfix%((%o%?%suffix%)|%suffixesThatCanHaveEeuphonicO%)%structuralCloseBracket%))"/>
  <regex name="%unlocantedSuffixGroup%" value="((%multiplier%?(%infixedSuffix%|%rootSuffix%))|(%multiplier%%optionalOpenBracket%%rootSuffix%%optionalCloseBracket%))"/>  
  <regex name="%suffixGroup%" value="(%newLocantGroup%?%unlocantedSuffixGroup%)"/>
  <regex name="%rootEnding%" value="(%inlineChargeGroup%*%suffixGroup%?)"/>
  <regex name="%locantOpenBracket%" value="(%stereochemistry%*%newLocantGroupNoStartingHyphen%?%multiplier%?%openBracket%)"/>
  <regex name="%ring_CanStartWithHydro_NonDetachableFeatures%" value="((%heteroReplacement%|%hydroGroup%)*(%bigCapitalH%?%lambdaConvention%?|%lambdaConvention%?%bigCapitalH%?))"/><!--bigCapitalH before lambdaConvention is preferred-->
  <regex name="%ringNonDetachableFeatures%" value="((%heteroReplacement%*|%hydroGroup%?%heteroReplacement%+%hydroGroup%?)(%bigCapitalH%?%lambdaConvention%?|%lambdaConvention%?%bigCapitalH%?)%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes or for some retained ring names e.g. 3,8-phenanthroline or for benzo in fused rings where locants specify heteroatom positions-->
  <regex name="%acyclicNonDetachableFeatures%" value="(%heteroReplacement%*%lambdaConvention%?%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes-->


<!-- groups-->
  <!--acyclic-->
  <regex name="%heteroChain%" value = "((%multiplier%%heteroStem%%unsaturationBlock%)|(%heteroStem%%hyphen%?%ane%))"/>
  <regex name="%alternatingHeteroChain%" value = "(%multiplier%(%heteroAtom%|%heteroAtomaElided%){2,}%unsaturationBlock%)"/>
  <regex name="%alkaneChain%" value = "(%irregularAlkaneStem%|%alkanen%?%alkaneStem%)"/>

  <regex name="%straightChainGroups%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneStem%%unsaturationBlock%)"/>
  <regex name="%chainGroup%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneChain%%unsaturationBlock%)"/>
  <regex name="%chainSubstituent%" value = "((%chainGroup%|%alkaneChain%)%inlineEndings%)"/>

  <regex name="%acidGroup%" value = "(%acidStem%%unlocantedSuffixGroup%)"/>
  <regex name="%acidSubstituent%" value = "(%acidStem%%unlocantedInlineSuffixGroup%)"/>

  <regex name="%simpleSubstituents%" value = "(%simpleSubstituent%|%suffixableSubstituent%%inlineSuffixGroup%%repeatableInlineSuffixGroup%*)"/>

  <!--cyclic-->
  <regex name="%semiTrivialFusedRing%" value = "(%vonBaeyerMultiplier%%FR2hydrocarbonComponent%)"/>
  <regex name="%vonBaeyerSystem%" value = "(%vonBaeyerMultiplier%%vonBaeyer%(%alkaneStem%%unsaturationBlock%|%heteroChain%))"/><!--support for alternating heteroChain missing-->
  <regex name="%cycloChain%" value = "(%cyclo%%straightChainGroups%)"/>
  <regex name="%cycloChainSubstituent%" value = "(%cyclo%%alkaneStem%)"/>
  <regex name="%spiroSystem%" value = "(%simpleMultiplierGroup%?%spiro%%alkaneStem%%unsaturationBlock%)"/><!--support for heteroChain/alternating heteroChain missing-->
  <regex name="%hantzschWidmanRing%" value = "((%newLocantGroupNoStartingHyphen%|(%optionalOpenBracket%%newLocantGroup%%optionalCloseBracket%))?((%multiplier%?%hwHeteroAtom%)*((%multiplier%?%hwAneCompatible%)%hwAne%)|((%multiplier%?%hwHeteroAtom%)*(%multiplier%?%hwIneCompatible%)%hwIne%)|((%multiplier%?%hwHeteroAtom%)+%hantzschWidmanSuffix%)))"/>
  <regex name="%fusor%" value = "((%fusionRing%|%cycloChainSubstituent%|%annulen%%o%|%semiTrivialFusedRing%%o%|%hantzschWidmanRing%%o%)%fusionBracket%?)"/>
  <regex name="%trivialRingSubstituentGroup%" value = "(%trivialRingSubstituent%%unlocantedSuffixGroup%)" /><!-- possibly this term should be replaced by special cases-->
<!-- allows abbreviated alkanes e.g. bicyclo[2.2.2]octyl instead of bicyclo[2.2.2]octanyl-->
  <regex name="%vonBaeyerSystemSubstituent%" value = "(%vonBaeyerMultiplier%%vonBaeyer%%alkaneStem%)"/>
  <regex name="%spiroSystemSubstituent%" value = "(%simpleMultiplierGroup%?%spiro%%alkaneStem%)"/>

  <regex name="%ringGroup%" value = "((%semiTrivialFusedRing%|%vonBaeyerSystem%|%cycloChain%|%spiroSystem%|%hantzschWidmanRing%|%annulen%|%trivialRing%)%e%?|%trivialRingSubstituentGroup%)"/>
  <regex name="%ringSubstituent%" value = "((%ringGroup%|%cycloChain%|%vonBaeyerSystemSubstituent%|%cycloChainSubstituent%|%spiroSystemSubstituent%)%inlineEndings%|%trivialRingSubstituent%%inlineSuffixGroup%)"/>

  <!--Complex terms-->
  <regex name="%fusedRingSystem%" value = "(%fusor%+%ringGroup%)"/>
  <regex name="%ringAssemblyConjunctive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?(%ringGroup%|%fusedRingSystem%)%rootEnding%)" />
  <regex name="%ringAssemblyAdditive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?(%ringSubstituent%|(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%*%inlineSuffixGroup%))" />
  <regex name="%ringAssemblyRing%" value = "(%ringAssemblyConjunctive%|%ringAssemblyAdditive%)" />
  <regex name="%ringAssembly%" value = "((%ringAssemblyLocant%|%orthoMetaPara%)?%ringAssemblyMultiplier%%hyphen%?(%ringAssemblyRing%|%structuralOpenBracket%%ringAssemblyRing%%structuralCloseBracket%))"/>

  <regex name="%allRingSubstituents%" value = "(%ringSubstituent%|(%ringAssembly%|%optionalOpenBracket%%ringAssembly%%optionalCloseBracket%)%inlineEndings%|%fusedRingSystem%%inlineEndings%)"/>
  <regex name="%allOtherSubstituents%" value = "(%simpleSubstituents%|%chainSubstituent%|%acidSubstituent%|(%groupStemAllowingInlineSuffixes%|%groupStemAllowingAllSuffixes%)%e%?%inlineEndings%)"/>
  <regex name="%subsituentBody%" value= "(%ringNonDetachableFeatures%%allRingSubstituents%|%acyclicNonDetachableFeatures%%allOtherSubstituents%)"/>
  <regex name="%substituent%" value= "(%locantOpenBracket%*%stereochemistry%*%newLocantGroupNoStartingHyphen%?%multiplier%?%subsituentBody%%closeBracket%*%interSubstituentHyphen%?%endOfSubstituent%)"/>

  <regex name="%allRingGroups%" value = "((%ringGroup%|%ringAssembly%|%optionalOpenBracket%%ringAssembly%%optionalCloseBracket%|%fusedRingSystem%)%rootEnding%)"/>
  <regex name="%allOtherSuffixableGroups%" value = "((%groupStemAllowingAllSuffixes%%e%?|%chainGroup%)%rootEnding%|%acidGroup%|%groupStemAllowingInlineSuffixes%%e%?%inlineChargeGroup%*)"/>
  <regex name="%mainGroupBody%" value="(%ringNonDetachableFeatures%%allRingGroups%|%acyclicNonDetachableFeatures%(%allOtherSuffixableGroups%|%simpleGroup%))"/>
  <regex name="%mainGroup%" value="(%openBracket%?%multiplier%?%openBracket%?%stereochemistry%*%newLocantGroupNoStartingHyphen%?%mainGroupBody%%closeBracket%*%endOfMainGroup%)"/>

  <regex name="%chemical%" value="(%substituent%*%mainGroup%)"/>
</regexes>