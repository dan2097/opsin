<!DOCTYPE regexes SYSTEM "regexes.dtd">
<regexes>
<!-- These define the basic grammar of chemical words. These build the single-letter
codes found in regexTokens and the other tokenlist files into a large regular
expression, which is used in parsing.

Note that this is NOT a CFG! This file is read entry by entry, building up
a dictionary of the translated form of each term as it goes. This has
the consquence that if you want to use a term, you must define it in a previous
<regex> first. Note that this disallows recursive definitions, and hence this
does not define a CFG.
 -->

<!-- base level regexes, a mirror of the token files -->
  <regex name="%alkaneStemTrivial%" value="a"/>
  <regex name="%cyclicUnsaturableHydrocarbon%" value="A"/>
  <regex name="%alkaneStemModifier%" value="n"/>
  <regex name="%suffix%" value="s"/>
  <regex name="%unsaturator%" value="u"/>
  <regex name="%inlineSuffix%" value="i"/>
  <regex name="%simpleSubstituent%" value="x"/>
  <regex name="%simpleMultiplier%" value="m"/>
  <regex name="%elidedAMultiplier%" value="r"/>
  <regex name="%groupMultiplier%" value="R"/>
  <regex name="%groupStemAllowingInlineSuffixes%" value="g"/>
  <regex name="%simpleGroup%" value="G"/>
  <regex name="%locant%" value="l"/>
  <regex name="%hyphen%" value="h"/>
  <regex name="%openBracket%" value="o"/>
  <regex name="%closeBracket%" value="c"/>
  <regex name="%acidStem%" value="d"/>
  <regex name="%trivialRingSubstituentInlineOnly%" value="b"/>
  <regex name="%cyclo%" value="C"/>
  <regex name="%vonBaeyer%" value="B"/>
  <regex name="%spiroDescriptor%" value="S"/>
  <regex name="%heteroAtom%" value="H"/>
  <regex name="%heteroAtomaElided%" value="v"/>
  <regex name="%hantzschWidmanSuffix%" value="W"/>
  <regex name="%trivialRing%" value="z"/>
  <regex name="%fusionRing%" value="f"/>
  <regex name="%fusionBracket%" value="F"/>
  <regex name="%hydro%" value="y"/>
  <regex name="%bigCapitalH%" value="e"/>
  <regex name="%annulen%" value="N"/>
  <regex name="%orthoMetaPara%" value="O"/>
  <regex name="%stereochemistryBracket%" value="E"/>
  <regex name="%cisOrTrans%" value="t"/>
  <regex name="%heteroStem%" value="p"/>
  <regex name="%o%" value="Y"/>
  <regex name="%e%" value="Z"/>
  <regex name="%inlineChargeSuffix%" value="I"/>
  <regex name="%suffixableSubstituent%" value="X"/>
  <regex name="%hwHeteroAtom%" value="D"/>
  <regex name="%optionalOpenBracket%" value="T"/>
  <regex name="%optionalCloseBracket%" value="U"/>
  <regex name="%hwAneCompatible%" value="j"/>
  <regex name="%hwIneCompatible%" value="J"/>
  <regex name="%hwAne%" value="k"/>
  <regex name="%hwIne%" value="K"/>
  <regex name="%ringAssemblyMultiplier%" value="P"/>
  <regex name="%colonSeperatedLocant%" value="L"/>
  <regex name="%vonBaeyerMultiplier%" value="M"/>
  <regex name="%structuralOpenBracket%" value="q"/>
  <regex name="%structuralCloseBracket%" value="Q"/>
  <regex name="%repeatableInlineSuffix%" value="w"/>
  <regex name="%FR2hydrocarbonComponent%" value="V"/>
  <regex name="%lambdaConvention%" value="Ç"/>
  <regex name="%replacementInfix%" value="ü"/>
  <regex name="%endOfSubstituent%" value="é"/>
  <regex name="%endOfMainGroup%" value="â"/>
  <regex name="%interSubstituentHyphen%" value="ä"/>
  <regex name="%ane%" value="à"/>
  <regex name="%suffixesThatCanBeModifiedByAPrefix%" value="å"/>
  <regex name="%comma%" value="ç"/>
  <regex name="%groupStemAllowingAllSuffixes%" value="ê"/>
  <regex name="%aminoAcidEndsInIne%" value="ë"/>
  <regex name="%aminoAcidEndsInAn%" value="è"/>
  <regex name="%aminoAcidEndsInIc%" value="ï"/>
  <regex name="%ine%" value="î"/>
  <regex name="%suffixPrefix%" value="ì"/>
  <regex name="%multipleFusor%" value="Ä"/>
  <regex name="%benzo%" value="Å"/>
  <regex name="%locantThatNeedsBrackets%" value="É"/>
  <regex name="%basicFunctionalClass%" value="æ"/>
  <regex name="%multiplyableFunctionalClass%" value="Æ"/>
  <regex name="%monovalentFunctionalGroup%" value="ô"/>
  <regex name="%divalentFunctionalGroup%" value="ö"/>
  <regex name="%standaloneMonovalentFunctionalGroup%" value="ò"/>
  <regex name="%endOfFunctionalGroup%" value="û"/>
  <regex name="%functionalModifier%" value="ù"/>
  <regex name="%infixableInlineSuffix%" value="ÿ"/>
  <regex name="%monoNuclearNonCarbonAcid%" value="Ö"/>
  <regex name="%anhydrideFunctionalGroup%" value="Ü"/>
  <regex name="%alphaBetaStereochemLocant%" value="¢"/>
  <regex name="%implicitIc%" value="£"/>
  <regex name="%aminoAcidYl%" value="¥"/>
  <regex name="%oMeaningYl%" value="₧"/>
  <regex name="%nonCarbonAcidNoAcyl%" value="ƒ"/>
  <regex name="%simpleCyclicGroup%" value="á"/>
  <regex name="%acetalClass%" value="í"/>
  <regex name="%chalcogenReplacement%" value="ó"/>
  <regex name="%perhydro%" value="ú"/>
  <regex name="%chalcogenAcid%" value="ñ"/>
  <regex name="%ylamine%" value="Ñ"/>
  <regex name="%lightRotation%" value="ª"/>
  <regex name="%symPolycylicSpiro%" value="º"/>
  <regex name="%dispiroter%" value="¿"/>
  <regex name="%spiro%" value="⌐"/>
  <regex name="%a%" value="¬"/>
  <regex name="%spiroLocant%" value="½"/>
  <regex name="%relativeCisTrans%" value="¼"/>
  <regex name="%fusionRingAcceptsFrontLocants%" value="¡"/>
  <regex name="%trivialRingSubstituentAnySuffix%" value="«"/>
  <regex name="%elementaryAtom%" value="»"/>
  <regex name="%chargeOrOxidationNumberSpecifier%" value="░"/>
  <regex name="%alkaneStemUnits%" value="▒"/>
  <regex name="%alkaneStemTens%" value="▓"/>
  <regex name="%alkaneStemHundreds%" value="│"/>
  <regex name="%alkaneStemThousands%" value="┤"/>
  <regex name="%bridgeFormingO%" value="╡"/>
  <regex name="%naturalProductRequiresUnsaturator%" value="╢"/>
  <regex name="%mono%" value="╖"/>
  <regex name="%nitrogenHeteroStem%" value="╕"/>
  <regex name="%ylene%" value="╣"/>
  <regex name="%simpleGroupClass%" value="║"/>
  <regex name="%amineMeaningNitrilo%" value="╗"/>
  <regex name="%spiroOldMethod%" value="╝"/>
  <regex name="%inlineSuffixAllowingPrefixes%" value="╜"/>
  <regex name="%dlStereochemistry%" value="╛"/>
  <regex name="%subtractivePrefix%" value="┐"/>
  <!--up to ascii 191 used-->

<!-- composite regexes-->

<!-- UsefulTerms-->
  <regex name="%multiplier%" value="((%simpleMultiplier%|%elidedAMultiplier%|%groupMultiplier%)%hyphen%?)"/>
  <regex name="%multiplierNotGroup%" value="((%simpleMultiplier%|%elidedAMultiplier%)%hyphen%?)"/>
  <regex name="%multiplierNoElidedA%" value="((%simpleMultiplier%|%groupMultiplier%)%hyphen%?)"/>
  <regex name="%simpleMultiplierGroup%" value="(%simpleMultiplier%%hyphen%?)"/>
  <regex name="%stereochemistry%" value="(%stereochemistryBracket%|%locant%?%cisOrTrans%(%comma%%locant%?%cisOrTrans%)*%hyphen%?|%lightRotation%)"/>
  <regex name="%optLocantGroupNoOMP%" value="(%hyphen%?%locant%?)"/>
  <regex name="%optLocantGroup%" value="(%hyphen%?(%locant%|%orthoMetaPara%)?)"/>
  <regex name="%locantGroup%" value="(%hyphen%?(%locant%|%orthoMetaPara%))"/>
  <regex name="%newLocantGroupNoStartingHyphen%" value="(%locant%|%orthoMetaPara%)"/><!--Substituents/mainGroups may not start with a hyphen (otherwise it is ambiguous as to where to break up the name so this is used for prefixes-->
  <regex name="%bracketedLocant%" value="(%optionalOpenBracket%%locantThatNeedsBrackets%%optionalCloseBracket%%hyphen%?)"/>
  <regex name="%infixReplacement%" value ="(%multiplier%?%replacementInfix%(%o%?%multiplier%?%replacementInfix%)*%o%?)"/>
  <regex name="%infixedInlineSuffix%" value="(%o%?%infixReplacement%%infixableInlineSuffix%|%structuralOpenBracket%%infixReplacement%%infixableInlineSuffix%%structuralCloseBracket%)"/>
  <regex name="%infixedPrefixedInlineSuffix%" value ="(%suffixPrefix%%infixReplacement%%inlineSuffixAllowingPrefixes%|%optionalOpenBracket%%suffixPrefix%%infixReplacement%%inlineSuffixAllowingPrefixes%%optionalCloseBracket%)" />
  <regex name="%unlocantedInlineSuffixGroup%" value="(%multiplierNoElidedA%?(%infixedInlineSuffix%|%inlineSuffix%|%optionalOpenBracket%%inlineSuffix%%optionalCloseBracket%|%infixedPrefixedInlineSuffix%|(%o%?%infixReplacement%)?%suffixPrefix%%inlineSuffixAllowingPrefixes%|%optionalOpenBracket%(%o%?%infixReplacement%)?%suffixPrefix%%inlineSuffixAllowingPrefixes%%optionalCloseBracket%))"/>
  <regex name="%inlineSuffixGroup%" value="(%hyphen%?(%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%unlocantedInlineSuffixGroup%)"/>
  <regex name="%repeatableInlineSuffixGroup%" value="(%hyphen%?(%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%simpleMultiplierGroup%?%repeatableInlineSuffix%)"/>
  <regex name="%inlineChargeGroup%" value="(%optLocantGroup%%multiplier%?%inlineChargeSuffix%)"/>
  <regex name="%inlineEndings%" value="(%inlineChargeGroup%*%inlineSuffixGroup%%repeatableInlineSuffixGroup%*)"/>
  <regex name="%unsaturation%" value="(%optLocantGroupNoOMP%?%multiplier%?%unsaturator%)"/>
  <regex name="%unsaturationBlock%" value="((%hyphen%?%ane%|%unsaturation%)%unsaturation%*)"/>
  <regex name="%heteroReplacement%" value="((%newLocantGroupNoStartingHyphen%?%multiplierNotGroup%|(%locant%?|%lambdaConvention%)%multiplierNotGroup%?)%heteroAtom%%hyphen%?)"/>
  <regex name="%hydroGroup%" value="((%locant%?%multiplier%%hydro%|%perhydro%)%hyphen%?)"/><!--can be considered detachable or non detachable-->
  <regex name="%subtractivePrefixGroup%" value="(%locant%?%multiplier%?%subtractivePrefix%%hyphen%?)"/>
  <regex name="%suffixes%" value="(%suffixesThatCanBeModifiedByAPrefix%|%suffix%)"/>
  <regex name="%infixedSuffix%" value ="((%o%?%infixReplacement%%suffixes%)|(%structuralOpenBracket%%infixReplacement%%suffixes%%structuralCloseBracket%))" />
  <regex name="%infixedPrefixedSuffix%" value ="(%suffixPrefix%%infixReplacement%%suffixesThatCanBeModifiedByAPrefix%|%optionalOpenBracket%%suffixPrefix%%infixReplacement%%suffixesThatCanBeModifiedByAPrefix%%optionalCloseBracket%)" />
  <regex name="%rootSuffix%" value= "(%suffix%|%o%?%suffixesThatCanBeModifiedByAPrefix%)" />
  <regex name="%unlocantedSuffixGroup%" value="(%multiplier%?(%infixedSuffix%|%rootSuffix%|(%o%?%infixReplacement%)?(%suffixPrefix%%suffixesThatCanBeModifiedByAPrefix%|%infixedPrefixedSuffix%))|%multiplier%%optionalOpenBracket%%rootSuffix%%optionalCloseBracket%)"/>
  <regex name="%suffixGroup%" value="(%hyphen%?(%relativeCisTrans%|%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%unlocantedSuffixGroup%)"/>
  <regex name="%rootEnding%" value="(%inlineChargeGroup%*%suffixGroup%?)"/>
  <regex name="%locantOpenBracket%" value="(%stereochemistry%*%newLocantGroupNoStartingHyphen%{0,2}%stereochemistry%*%multiplier%?%openBracket%%hyphen%?)"/>
  <regex name="%alkaneStemSystematic%" value="((%alkaneStemUnits%%a%?)?(%alkaneStemTens%%a%?)?(%alkaneStemHundreds%%a%?)?%alkaneStemThousands%|(%alkaneStemUnits%%a%?)?(%alkaneStemTens%%a%?)?%alkaneStemHundreds%|(%alkaneStemUnits%%a%?)?%alkaneStemTens%)"/>
  <regex name="%alkaneStem%" value="(%alkaneStemSystematic%|%alkaneStemTrivial%)"/>
  <regex name="%dlStereochemistryPrefix%" value="(%dlStereochemistry%%lightRotation%?)"/>

  <regex name="%fusedRingBridges%" value ="(%newLocantGroupNoStartingHyphen%?%alkaneStem%%ane%%bridgeFormingO%%hyphen%?)"/>
  <regex name="%ring_CanStartWithHydro_NonDetachableFeatures%" value="(%hydroGroup%*(%bigCapitalH%|%lambdaConvention%|%heteroReplacement%|%fusedRingBridges%|%subtractivePrefixGroup%)*)"/><!--bigCapitalH before lambdaConvention is preferred. Expected ordering often varies between IUPAC/CAS/Beilstein so be lenient-->
  <regex name="%ringNonDetachableFeatures%" value="((%bigCapitalH%|%lambdaConvention%|%heteroReplacement%|%fusedRingBridges%)*%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes -->
  <regex name="%acyclicNonDetachableFeatures%" value="(%heteroReplacement%*%lambdaConvention%?%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes-->


<!-- groups-->
  <!--acyclic-->

  <regex name="%heteroChain%" value = "((%multiplierNotGroup%%heteroStem%%unsaturationBlock%)|(%heteroStem%%hyphen%?%ane%))"/>
  <regex name="%alternatingHeteroChain%" value = "(%multiplierNotGroup%(%heteroAtom%|%heteroAtomaElided%){2,}%unsaturationBlock%)"/>

  <regex name="%straightChainGroups%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneStem%%a%?%unsaturationBlock%)"/>
  <regex name="%chainGroup%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneStemModifier%?%alkaneStem%%a%?%unsaturationBlock%)"/>
  <regex name="%nitrogenChainSubstituent%" value = "(((%multiplierNotGroup%%nitrogenHeteroStem%%unsaturationBlock%)|(%nitrogenHeteroStem%%hyphen%?%ane%))%oMeaningYl%)"/>
  <regex name="%alkYlene%" value = "((%alkaneStemSystematic%%unsaturationBlock%?|%alkaneStemTrivial%%unsaturationBlock%)%optLocantGroupNoOMP%%ylene%)"/>
  <regex name="%chainSubstituent%" value = "(%chainGroup%%inlineEndings%|%alkaneStemModifier%?%alkaneStem%(%optLocantGroup%|%a%%locantGroup%)%unlocantedInlineSuffixGroup%%repeatableInlineSuffixGroup%*|%nitrogenChainSubstituent%|%alkYlene%)"/>

  <regex name="%aminoMonoAcid%" value="(%dlStereochemistryPrefix%?(%aminoAcidEndsInIne%%ine%|%aminoAcidEndsInAn%%ane%))"/>
  <regex name="%aminoAcidOptionalIne%" value="(%dlStereochemistryPrefix%?(%aminoAcidEndsInIne%%ine%?|%aminoAcidEndsInAn%%ane%?|%aminoAcidEndsInIc%))"/>
  <regex name="%aminoAcidGroup%" value="(%aminoMonoAcid%%implicitIc%%inlineChargeSuffix%?|(%aminoMonoAcid%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%)(%infixedSuffix%|%rootSuffix%))"/>

  <regex name="%aminoAcidLocantedYl%" value ="((%aminoMonoAcid%%implicitIc%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%%rootSuffix%)%hyphen%?%locant%%aminoAcidYl%)"/>
  <regex name="%aminoAcidRadicalOnN%" value ="((%aminoMonoAcid%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%)%implicitIc%%oMeaningYl%)"/>
  <regex name="%aminoAcidSubstituent%" value="(%aminoAcidLocantedYl%|%aminoAcidRadicalOnN%|%aminoAcidOptionalIne%(%infixedInlineSuffix%|%inlineSuffix%))"/>

  <regex name="%nonCarbonAcidGroup%" value="((%monoNuclearNonCarbonAcid%|%nonCarbonAcidNoAcyl%)(%infixedSuffix%|%rootSuffix%))"/>
  <!--chalcogenAcidGroups must be substituted otherwise they are generic terms-->
  <regex name="%chalcogenAcidGroup%" value="(%chalcogenAcid%(%infixedSuffix%|%o%?%rootSuffix%))"/>
  <regex name="%nonCarbonAcidSubstituent%" value="(%monoNuclearNonCarbonAcid%(%infixedInlineSuffix%|%inlineSuffix%)|%chalcogenAcid%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%))"/>

  <regex name="%acidGroup%" value = "(%acidStem%(%infixedSuffix%|%o%?%rootSuffix%)|%aminoAcidGroup%|%nonCarbonAcidGroup%)"/>
  <regex name="%acidSubstituent%" value = "(%acidStem%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%)|%aminoAcidSubstituent%|%nonCarbonAcidSubstituent%)"/>

  <regex name="%simpleSubstituents%" value = "(%simpleSubstituent%|%suffixableSubstituent%%inlineSuffixGroup%%repeatableInlineSuffixGroup%*)"/>

  <!--cyclic-->
  <regex name="%semiTrivialFusedRing%" value = "(%vonBaeyerMultiplier%%FR2hydrocarbonComponent%)"/>
  <regex name="%vonBaeyerSystem%" value = "(%vonBaeyerMultiplier%%vonBaeyer%(%alkaneStem%%a%?%unsaturationBlock%|%heteroChain%))"/><!--support for alternating heteroChain missing-->
  <regex name="%cycloChain%" value = "(%cyclo%%straightChainGroups%)"/>
  <regex name="%cycloChainSubstituent%" value = "(%cyclo%%alkaneStem%)"/>
  <regex name="%spiroSystem%" value = "(%simpleMultiplierGroup%?%spiroDescriptor%%alkaneStem%%a%?%unsaturationBlock%)"/><!--support for heteroChain/alternating heteroChain missing-->
  <regex name="%hantzschWidmanRing%" value = "((%newLocantGroupNoStartingHyphen%|%bracketedLocant%)?((%multiplierNotGroup%?%hwHeteroAtom%)*((%multiplierNotGroup%?%hwAneCompatible%)%hwAne%)|((%multiplierNotGroup%?%hwHeteroAtom%)*(%multiplierNotGroup%?%hwIneCompatible%)%hwIne%)|((%multiplierNotGroup%?%hwHeteroAtom%)+%hantzschWidmanSuffix%)))"/>
  <regex name="%fusionComponent%" value = "(%fusionRing%|(%locantThatNeedsBrackets%|%bracketedLocant%)?%fusionRingAcceptsFrontLocants%|%benzo%|%cycloChainSubstituent%%a%?|%annulen%%o%|%semiTrivialFusedRing%%o%|%hantzschWidmanRing%%o%)"/>
  <regex name="%cyclicUnsaturableHydrocarbonGroup%" value = "(%cyclicUnsaturableHydrocarbon%%a%?%unsaturationBlock%)" />
  <regex name="%naturalProductGroup%" value = "(%naturalProductRequiresUnsaturator%%a%?%unsaturationBlock%)" />
  <regex name="%trivialRingSubstituentGroup%" value = "(%bracketedLocant%?%trivialRingSubstituentAnySuffix%%suffixGroup%)" />
  <regex name="%trivialRingSubstituentSub%" value = "(%bracketedLocant%?(%trivialRingSubstituentAnySuffix%|%trivialRingSubstituentInlineOnly%)%inlineSuffixGroup%)" />
<!-- allows abbreviated alkanes e.g. bicyclo[2.2.2]octyl instead of bicyclo[2.2.2]octanyl-->
  <regex name="%vonBaeyerSystemSubstituent%" value = "(%vonBaeyerMultiplier%%vonBaeyer%%alkaneStem%)"/>
  <regex name="%spiroSystemSubstituent%" value = "(%simpleMultiplierGroup%?%spiroDescriptor%%alkaneStem%)"/>

  <regex name="%conjunctiveSideChainRoot%" value ="(%hyphen%?(%locant%|%alphaBetaStereochemLocant%)?%multiplier%?(%alkaneStem%%hyphen%?(%ane%%suffixGroup%|%ane%?%ylamine%)|%optionalOpenBracket%%alkaneStem%%hyphen%?%ane%?%ylamine%%optionalCloseBracket%|%acidStem%(%infixedSuffix%|%o%?%rootSuffix%)))"/>
  <regex name="%conjunctiveSideChainInline%" value ="(%hyphen%?(%locant%|%alphaBetaStereochemLocant%)?%multiplier%?(%acidStem%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%)))"/>

  <!--Fused ring terms-->
  <regex name="%benzoComponent%" value ="((%bracketedLocant%|%locant%)%benzo%)"/>
  <regex name="%simpleComponent%" value ="(%fusionComponent%%hyphen%?%fusionBracket%?%hyphen%?|%benzoComponent%)" />
  <regex name="%multipliedComponent%" value ="(%multiplier%(%fusionComponent%%hyphen%?%multipleFusor%?%hyphen%?|%benzoComponent%))" />
  <regex name="%multipliedParent%" value ="(%fusionComponent%%hyphen%?%multipleFusor%?%hyphen%?%multiplier%)"/>
  <regex name="%fusedRingSystemFromTrivialRingSubstituent%" value = "((%simpleComponent%|%multipliedComponent%|%multipliedParent%)+%trivialRingSubstituentSub%)"/>

  <!--Complex terms-->
  <regex name="%ringGroup%" value = "((%semiTrivialFusedRing%|%hantzschWidmanRing%|%annulen%|(%locant%|%bracketedLocant%)?%trivialRing%)%e%?|%vonBaeyerSystem%|%spiroSystem%|%trivialRingSubstituentGroup%|%cycloChain%|%cyclicUnsaturableHydrocarbonGroup%|%naturalProductGroup%)"/>
  <regex name="%irregularRingSubstituentStem%" value="(%vonBaeyerSystemSubstituent%|%cycloChainSubstituent%|%spiroSystemSubstituent%|%cyclicUnsaturableHydrocarbon%%a%?)"/>
  <regex name="%ringSubstituent%" value = "((%ringGroup%|%irregularRingSubstituentStem%)(%inlineEndings%|%conjunctiveSideChainInline%)|%trivialRingSubstituentSub%|%fusedRingSystemFromTrivialRingSubstituent%)"/>

  <regex name="%fusedRingSystem%" value = "((%simpleComponent%|%multipliedComponent%|%multipliedParent%)+(%ringGroup%|%simpleCyclicGroup%))"/>
	
	<regex name="%polycyclicSpiroOldMethod%" value="(%ringNonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%*(%hyphen%?%locant%?%spiroOldMethod%%locant%?(%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%*|%optionalOpenBracket%%locant%?%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%*%optionalCloseBracket%))+)"/>
	<regex name="%vonBaeyerForSpiro%" value="(%structuralOpenBracket%%vonBaeyerMultiplier%%vonBaeyer%(%alkaneStem%|%multiplier%%heteroStem%)%ane%%structuralCloseBracket%%unsaturation%+)" />
	<regex name="%polycyclicSpiroIdenticalComponents%" value ="((%symPolycylicSpiro%|%dispiroter%)((%ringGroup%|%fusedRingSystem%)|%structuralOpenBracket%%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%structuralCloseBracket%|%vonBaeyerForSpiro%))"/>
  <regex name="%polycyclicSpiroContents%" value="(%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)(%hyphen%?%spiroLocant%((%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%))|(%optionalOpenBracket%%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%optionalCloseBracket%)))+)" />
  <regex name="%polycyclicSpiro%" value ="(%simpleMultiplier%?%spiro%%structuralOpenBracket%%polycyclicSpiroContents%%structuralCloseBracket%)"/>
  <regex name="%polycyclicSpiroGroup%" value ="(%polycyclicSpiroIdenticalComponents%|%polycyclicSpiro%|%polycyclicSpiroOldMethod%)" />

  <regex name="%ringAssemblyConjunctive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?(%ringGroup%|%simpleCyclicGroup%|%fusedRingSystem%)%rootEnding%)" />
  <regex name="%ringAssemblyAdditive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?(%trivialRingSubstituentSub%|%fusedRingSystemFromTrivialRingSubstituent%|%irregularRingSubstituentStem%%optLocantGroupNoOMP%%repeatableInlineSuffix%|(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%*%optLocantGroupNoOMP%%repeatableInlineSuffix%))" />
  <regex name="%ringAssemblyRing%" value = "(%ringAssemblyConjunctive%|%ringAssemblyAdditive%)" />
  <regex name="%locantForRingAssembly%" value = "(%colonSeperatedLocant%|%newLocantGroupNoStartingHyphen%|%optionalOpenBracket%(%colonSeperatedLocant%|%locant%)%optionalCloseBracket%%hyphen%?)" />
  <regex name="%ringAssembly%" value = "(%locantForRingAssembly%?%ringAssemblyMultiplier%%hyphen%?(%ringAssemblyRing%|%structuralOpenBracket%%ringAssemblyRing%%structuralCloseBracket%))"/>

  <regex name="%allRingSubstituents%" value = "(%ringSubstituent%|((%ringAssembly%|%structuralOpenBracket%%ringAssembly%%structuralCloseBracket%)|%fusedRingSystem%|%polycyclicSpiroGroup%)(%inlineEndings%|%conjunctiveSideChainInline%))"/>
  <regex name="%allOtherSubstituents%" value = "(%simpleSubstituents%|%chainSubstituent%|%acidSubstituent%|(%groupStemAllowingInlineSuffixes%|%groupStemAllowingAllSuffixes%)%e%?%inlineEndings%)"/>
  <regex name="%subsituentBody%" value= "(%ringNonDetachableFeatures%%allRingSubstituents%|%acyclicNonDetachableFeatures%%allOtherSubstituents%)"/>
  <regex name="%amineMeaningNitriloSubstituent%" value = "(%multiplier%%amineMeaningNitrilo%%interSubstituentHyphen%?)"/><!--needed to avoid "amine" being parsed as a substituent-->
  <regex name="%substituent%" value= "((%locantOpenBracket%*%newLocantGroupNoStartingHyphen%?%stereochemistry%*(%relativeCisTrans%|%newLocantGroupNoStartingHyphen%)?(%multiplier%|%groupMultiplier%%simpleMultiplier%)?(%subsituentBody%%closeBracket%*%interSubstituentHyphen%?|%hydroGroup%)|%amineMeaningNitriloSubstituent%)%endOfSubstituent%)"/>

  <regex name="%allRingGroups%" value = "((%ringGroup%|%ringAssembly%|%structuralOpenBracket%%ringAssembly%%structuralCloseBracket%|%fusedRingSystem%|%polycyclicSpiroGroup%)(%rootEnding%|%conjunctiveSideChainRoot%)|%simpleCyclicGroup%%conjunctiveSideChainRoot%?)"/>
  <regex name="%allOtherSuffixableGroups%" value = "((%groupStemAllowingAllSuffixes%%e%?|%chainGroup%)%rootEnding%|%acidGroup%|%groupStemAllowingInlineSuffixes%%e%?%inlineChargeGroup%*)"/>
  <regex name="%mainGroupBody%" value="(%ringNonDetachableFeatures%%allRingGroups%|%acyclicNonDetachableFeatures%(%allOtherSuffixableGroups%|%simpleGroup%|%elementaryAtom%%chargeOrOxidationNumberSpecifier%?))"/>
  <regex name="%mainGroupHead%" value="(%openBracket%?%multiplier%?%openBracket%?%stereochemistry%*(%newLocantGroupNoStartingHyphen%%mono%?)?)" />
  <regex name="%mainGroupTail%"	value="(%closeBracket%*%endOfMainGroup%)" />
	<regex name="%mainGroup%" value="(%mainGroupHead%%mainGroupBody%%mainGroupTail%)"/>
	<regex name="%mainGroupThatRequiresSubstituent%" value="(%mainGroupHead%(%chalcogenAcidGroup%|%simpleGroupClass%)%mainGroupTail%)"/>

<!-- functional Groups-->
  <regex name="%anhydride%" value="((%locant%|%colonSeperatedLocant%)?%multiplier%?(%anhydrideFunctionalGroup%|%openBracket%%anhydrideFunctionalGroup%%closeBracket%))"/>
  <regex name="%acetal%" value="(%simpleMultiplier%?%chalcogenReplacement%{0,2}%acetalClass%)" />
  <regex name="%functionalClass%" value ="(%locant%?%simpleMultiplierGroup%?%multiplyableFunctionalClass%%closeBracket%?|%acetal%|%anhydride%|%basicFunctionalClass%)"/>
  <regex name="%functionalGroup%" value ="(%multiplier%?(%monovalentFunctionalGroup%|%standaloneMonovalentFunctionalGroup%)|%divalentFunctionalGroup%)"/>
  <regex name="%functionalTerm%" value="((%functionalClass%|%functionalGroup%|%functionalModifier%)%endOfFunctionalGroup%)"/>

  <regex name="%chemical%" value="((%functionalModifier%%endOfFunctionalGroup%)?(%substituent%+%functionalTerm%?|(%substituent%*%mainGroup%|%substituent%+%mainGroupThatRequiresSubstituent%)(%hyphen%?%functionalTerm%)?)|%hyphen%?%functionalTerm%)"/>
<!--Note that the %functionalTerm%? in the term above indicates that a space has technically been omitted!-->
</regexes>