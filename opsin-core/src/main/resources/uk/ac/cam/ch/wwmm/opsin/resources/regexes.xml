<!DOCTYPE regexes SYSTEM "regexes.dtd">
<regexes>
<!-- These define the basic grammar of chemical words. These build the single-letter
codes found in regexTokens and the other tokenlist files into a large regular
expression, which is used in parsing.

Note that this is NOT a CFG! This file is read entry by entry, building up
a dictionary of the translated form of each term as it goes. This has
the consquence that if you want to use a term, you must define it in a previous
<regex> first. Note that this disallows recursive definitions, and hence this
does not define a CFG.
 -->

<!-- base level regexes, a mirror of the token files -->
  <regex name="%cyclicUnsaturableHydrocarbon%" value="A"/>
  <regex name="%vonBaeyer%" value="B"/>
  <regex name="%cyclo%" value="C"/>
  <regex name="%hwHeteroAtom%" value="D"/>
  <regex name="%stereochemistryBracket%" value="E"/>
  <regex name="%fusionBracket%" value="F"/>
  <regex name="%simpleGroup%" value="G"/>
  <regex name="%heteroAtom%" value="H"/>
  <regex name="%inlineChargeSuffix%" value="I"/>
  <regex name="%hwIneCompatible%" value="J"/>
  <regex name="%hwIne%" value="K"/>
  <regex name="%colonSeperatedLocant%" value="L"/>
  <regex name="%vonBaeyerMultiplier%" value="M"/>
  <regex name="%annulen%" value="N"/>
  <regex name="%orthoMetaPara%" value="O"/>
  <regex name="%ringAssemblyMultiplier%" value="P"/>
  <regex name="%structuralCloseBracket%" value="Q"/>
  <regex name="%groupMultiplier%" value="R"/>
  <regex name="%spiroDescriptor%" value="S"/>
  <regex name="%optionalOpenBracket%" value="T"/>
  <regex name="%optionalCloseBracket%" value="U"/>
  <regex name="%FR2hydrocarbonComponent%" value="V"/>
  <regex name="%hantzschWidmanSuffix%" value="W"/>
  <regex name="%suffixableSubstituent%" value="X"/>
  <regex name="%o%" value="Y"/>
  <regex name="%e%" value="Z"/>
  <regex name="%alkaneStemTrivial%" value="a"/>
  <regex name="%trivialRingSubstituentInlineOnly%" value="b"/>
  <regex name="%closeBracket%" value="c"/>
  <regex name="%acidStem%" value="d"/>
  <regex name="%bigCapitalH%" value="e"/>
  <regex name="%fusionRing%" value="f"/>
  <regex name="%groupStemAllowingInlineSuffixes%" value="g"/>
  <regex name="%hyphen%" value="h"/>
  <regex name="%inlineSuffix%" value="i"/>
  <regex name="%hwAneCompatible%" value="j"/>
  <regex name="%hwAne%" value="k"/>
  <regex name="%locant%" value="l"/>
  <regex name="%tetrOrHigher%" value="m"/>
  <regex name="%alkaneStemModifier%" value="n"/>
  <regex name="%openBracket%" value="o"/>
  <regex name="%heteroStem%" value="p"/>
  <regex name="%structuralOpenBracket%" value="q"/>
  <regex name="%diOrTri%" value="r"/>
  <regex name="%suffix%" value="s"/>
  <regex name="%unbrackettedCisTrans%" value="t"/>
  <regex name="%unsaturator%" value="u"/>
  <regex name="%glycosylSuffix%" value="v"/>
  <regex name="%repeatableInlineSuffix%" value="w"/>
  <regex name="%simpleSubstituent%" value="x"/>
  <regex name="%hydro%" value="y"/>
  <regex name="%trivialRing%" value="z"/>
  <regex name="%lambdaConvention%" value="¡"/>
  <regex name="%replacementInfix%" value="¢"/>
  <regex name="%interSubstituentHyphen%" value="£"/>
  <regex name="%ane%" value="¤"/>
  <regex name="%suffixesThatCanBeModifiedByAPrefix%" value="¥"/>
  <regex name="%comma%" value="¦"/>
  <regex name="%groupStemAllowingAllSuffixes%" value="§"/>
  <regex name="%aminoAcidEndsInIne%" value="¨"/>
  <regex name="%aminoAcidEndsInAn%" value="©"/>
  <regex name="%aminoAcidEndsInIc%" value="ª"/>
  <regex name="%ine%" value="«"/>
  <regex name="%suffixPrefix%" value="¬"/>
  <regex name="%multipleFusor%" value="­"/>
  <regex name="%benzo%" value="®"/>
  <regex name="%locantThatNeedsBrackets%" value="¯"/>
  <regex name="%basicFunctionalClass%" value="°"/>
  <regex name="%multiplyableFunctionalClass%" value="±"/>
  <regex name="%monovalentFunctionalGroup%" value="²"/>
  <regex name="%divalentFunctionalGroup%" value="³"/>
  <regex name="%standaloneMonovalentFunctionalGroup%" value="´"/>
  <regex name="%functionalModifier%" value="µ"/>
  <regex name="%infixableInlineSuffix%" value="¶"/>
  <regex name="%monoNuclearNonCarbonAcid%" value="·"/>
  <regex name="%anhydrideFunctionalGroup%" value="¸"/>
  <regex name="%alphaBetaStereochemLocant%" value="¹"/>
  <regex name="%implicitIc%" value="º"/>
  <regex name="%locantedAminoAcidOrCarbohydrateYl%" value="»"/>
  <regex name="%oMeaningYl%" value="¼"/>
  <regex name="%nonCarbonAcidNoAcyl%" value="½"/>
  <regex name="%simpleCyclicGroup%" value="¾"/>
  <regex name="%acetalClass%" value="¿"/>
  <regex name="%chalcogenReplacement%" value="À"/>
  <regex name="%perhydro%" value="Á"/>
  <regex name="%chalcogenAcid%" value="Â"/>
  <regex name="%ylamine%" value="Ã"/>
  <regex name="%lightRotation%" value="Ä"/>
  <regex name="%symPolycylicSpiro%" value="Å"/>
  <regex name="%aminoAcidEndsInCompulsoryIne%" value="Æ"/>
  <regex name="%spiro%" value="Ç"/>
  <regex name="%a%" value="È"/>
  <regex name="%spiroLocant%" value="É"/>
  <regex name="%relativeCisTrans%" value="Ê"/>
  <regex name="%fusionRingAcceptsFrontLocants%" value="Ë"/>
  <regex name="%trivialRingSubstituentAnySuffix%" value="Ì"/>
  <regex name="%elementaryAtom%" value="Í"/>
  <regex name="%chargeOrOxidationNumberSpecifier%" value="Î"/>
  <regex name="%alkaneStemUnits%" value="Ï"/>
  <regex name="%alkaneStemTens%" value="Ð"/>
  <regex name="%alkaneStemHundreds%" value="Ñ"/>
  <regex name="%alkaneStemThousands%" value="Ò"/>
  <regex name="%bridgeFormingO%" value="Ó"/>
  <regex name="%naturalProductRequiresUnsaturator%" value="Ô"/>
  <regex name="%mono%" value="Õ"/>
  <regex name="%nitrogenHeteroStem%" value="Ö"/>
  <regex name="%ylene%" value="×"/>
  <regex name="%simpleGroupClass%" value="Ø"/>
  <regex name="%amineMeaningNitrilo%" value="Ù"/>
  <regex name="%spiroOldMethod%" value="Ú"/>
  <regex name="%inlineSuffixAllowingPrefixes%" value="Û"/>
  <regex name="%dlStereochemistry%" value="Ü"/>
  <regex name="%subtractivePrefix%" value="Ý"/>
  <regex name="%canBeDlPrefixedSimpleGroup%" value="Þ"/>
  <regex name="%trivialRingSubstituent%" value="ß"/>
  <regex name="%carbohydrateConfigurationalPrefix%" value="à"/>
  <regex name="%trivialCarbohydrateStem%" value="á"/>
  <regex name="%endOfMainGroup%" value="â"/>
  <regex name="%carbohydrateRingSize%" value="ã"/>
  <regex name="%carbohydrateChain%" value="ä"/>
  <regex name="%epoxy%" value="å"/>
  <regex name="%unbrackettedEZ%" value="æ"/>
  <regex name="%functionalSuffixBeforeInlineSuffix%" value="ç"/>
  <regex name="%cycleFormingSuffix%" value="è"/>
  <regex name="%endOfSubstituent%" value="é"/>
  <regex name="%glycosideSuffix%" value="ê"/>
  <regex name="%cyclicCarbohydrateAcidSuffix%" value="ë"/>
  <regex name="%carbohydrateLocant%" value="ì"/>
  <regex name="%acyclicCarbohydrateAcidSuffix%" value="í"/>
  <regex name="%carbohydrateUlSuffix%" value="î"/>
  <regex name="%carbohydrateOsUlSuffix%" value="ï"/>
  <regex name="%ose%" value="ð"/>
  <regex name="%diald%" value="ñ"/>
  <regex name="%itol%" value="ò"/>
  <regex name="%acyclicCarbohydrateAcidInlineSuffix%" value="ó"/>
  <regex name="%uron%" value="ô"/>
  <!--next would be Alt 0245-->
  <regex name="%endOfFunctionalGroup%" value="û"/>

<!-- composite regexes-->

<!-- UsefulTerms-->
  <regex name="%simpleMultiplier%" value="(%mono%|%diOrTri%|%tetrOrHigher%%a%)"/>
  <regex name="%multiplier%" value="((%mono%|%diOrTri%|%tetrOrHigher%%a%?|%groupMultiplier%)%hyphen%?)"/>
  <regex name="%multiplierNotGroup%" value="((%mono%|%diOrTri%|%tetrOrHigher%%a%?)%hyphen%?)"/>
  <regex name="%multiplierNoElidedA%" value="((%simpleMultiplier%|%groupMultiplier%)%hyphen%?)"/>
  <regex name="%simpleMultiplierGroup%" value="(%simpleMultiplier%%hyphen%?)"/>
  <regex name="%stereochemistry%" value="(%stereochemistryBracket%|%locant%?%unbrackettedCisTrans%(%comma%%locant%?%unbrackettedCisTrans%)*%hyphen%?|%locant%?%unbrackettedEZ%(%comma%%locant%?%unbrackettedEZ%)*%hyphen%|%lightRotation%|%alphaBetaStereochemLocant%)"/>
  <regex name="%optLocantGroupNoOMP%" value="(%hyphen%?%locant%?)"/>
  <regex name="%optLocantGroup%" value="(%hyphen%?(%locant%|%orthoMetaPara%)?)"/>
  <regex name="%newLocantGroupNoStartingHyphen%" value="(%locant%|%orthoMetaPara%)"/><!--Substituents/mainGroups may not start with a hyphen (otherwise it is ambiguous as to where to break up the name so this is used for prefixes-->
  <regex name="%bracketedLocant%" value="(%optionalOpenBracket%%locantThatNeedsBrackets%%optionalCloseBracket%%hyphen%?)"/>
  <regex name="%infixReplacement%" value ="(%multiplier%?%replacementInfix%(%o%?%multiplier%?%replacementInfix%)*%o%?)"/>
  <regex name="%infixedInlineSuffix%" value="(%o%?%infixReplacement%%infixableInlineSuffix%|%structuralOpenBracket%%infixReplacement%%infixableInlineSuffix%%structuralCloseBracket%)"/>
  <regex name="%infixedPrefixedInlineSuffix%" value ="(%suffixPrefix%%infixReplacement%%inlineSuffixAllowingPrefixes%|%optionalOpenBracket%%suffixPrefix%%infixReplacement%%inlineSuffixAllowingPrefixes%%optionalCloseBracket%)" />
  <regex name="%unlocantedInlineSuffixGroup%" value="(%multiplierNoElidedA%?(%infixedInlineSuffix%|%inlineSuffix%|%optionalOpenBracket%%inlineSuffix%%optionalCloseBracket%|%infixedPrefixedInlineSuffix%|(%o%?%infixReplacement%)?%suffixPrefix%%inlineSuffixAllowingPrefixes%|%optionalOpenBracket%(%o%?%infixReplacement%)?%suffixPrefix%%inlineSuffixAllowingPrefixes%%optionalCloseBracket%))"/>
  <regex name="%inlineSuffixGroup%" value="(%hyphen%?(%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%unlocantedInlineSuffixGroup%)"/>
  <regex name="%repeatableInlineSuffixGroup%" value="(%hyphen%?(%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%simpleMultiplierGroup%?%repeatableInlineSuffix%)"/>
  <regex name="%inlineFunctionSuffix%" value="(%optLocantGroup%%multiplier%?%functionalSuffixBeforeInlineSuffix%)"/>
  <regex name="%inlineChargeGroup%" value="(%hyphen%?%multiplier%?%inlineChargeSuffix%|(%hyphen%?(%locant%|%orthoMetaPara%)%multiplier%?%inlineChargeSuffix%)+)"/>
  <regex name="%inlineEndings%" value="(%inlineChargeGroup%?%inlineFunctionSuffix%?%inlineSuffixGroup%%repeatableInlineSuffixGroup%*)"/>
  <regex name="%unsaturation%" value="(%optLocantGroupNoOMP%?%multiplier%?%unsaturator%)"/>
  <regex name="%unsaturationBlock%" value="((%hyphen%?%ane%|%unsaturation%)%unsaturation%*)"/>
  <regex name="%heteroReplacement%" value="((%newLocantGroupNoStartingHyphen%?%multiplierNotGroup%|(%locant%?|%lambdaConvention%)%multiplierNotGroup%?)%heteroAtom%%hyphen%?)"/>
  <regex name="%hydroGroup%" value="((%locant%?%multiplier%%hydro%|%perhydro%)%hyphen%?)"/><!--can be considered detachable or non detachable-->
  <regex name="%subtractivePrefixGroup%" value="(%locant%?%multiplier%?%subtractivePrefix%%hyphen%?)"/>
  <regex name="%suffixes%" value="(%suffixesThatCanBeModifiedByAPrefix%|%suffix%)"/>
  <regex name="%infixedSuffix%" value ="((%o%?%infixReplacement%%suffixes%)|(%structuralOpenBracket%%infixReplacement%%suffixes%%structuralCloseBracket%))" />
  <regex name="%infixedPrefixedSuffix%" value ="(%suffixPrefix%%infixReplacement%%suffixesThatCanBeModifiedByAPrefix%|%optionalOpenBracket%%suffixPrefix%%infixReplacement%%suffixesThatCanBeModifiedByAPrefix%%optionalCloseBracket%)" />
  <regex name="%rootSuffix%" value= "(%suffix%|%o%?%suffixesThatCanBeModifiedByAPrefix%|%cycleFormingSuffix%)" />
  <regex name="%unlocantedSuffixGroup%" value="(%multiplier%?(%infixedSuffix%|%rootSuffix%|(%o%?%infixReplacement%)?(%suffixPrefix%%suffixesThatCanBeModifiedByAPrefix%|%infixedPrefixedSuffix%))|%multiplier%%optionalOpenBracket%%rootSuffix%%optionalCloseBracket%)"/>
  <regex name="%suffixGroup%" value="(%hyphen%?(%relativeCisTrans%|%newLocantGroupNoStartingHyphen%|%alphaBetaStereochemLocant%)?%unlocantedSuffixGroup%)"/>
  <regex name="%rootEnding%" value="(%inlineChargeGroup%?%suffixGroup%?)"/>
  <regex name="%locantOpenBracket%" value="(%stereochemistry%*%newLocantGroupNoStartingHyphen%{0,2}%stereochemistry%*%multiplier%?%openBracket%%hyphen%?)"/>
  <regex name="%alkaneStemSystematic%" value="((%alkaneStemUnits%%a%?)?(%alkaneStemTens%%a%?)?(%alkaneStemHundreds%%a%?)?%alkaneStemThousands%|(%alkaneStemUnits%%a%?)?(%alkaneStemTens%%a%?)?%alkaneStemHundreds%|(%alkaneStemUnits%%a%?)?%alkaneStemTens%)"/>
  <regex name="%alkaneStem%" value="(%alkaneStemSystematic%|%alkaneStemTrivial%)"/>
  <regex name="%dlStereochemistryPrefix%" value="(%dlStereochemistry%%lightRotation%?)"/>

  <regex name="%fusedRingBridges%" value ="(%newLocantGroupNoStartingHyphen%?%alkaneStem%%ane%%bridgeFormingO%%hyphen%?)"/>
  <regex name="%epoxyNonDetachableBridge%" value ="(%newLocantGroupNoStartingHyphen%?%epoxy%%hyphen%?)"/>
  <regex name="%ring_CanStartWithHydro_NonDetachableFeatures%" value="(%hydroGroup%*((%bigCapitalH%|%lambdaConvention%|%heteroReplacement%|%fusedRingBridges%|%subtractivePrefixGroup%)%epoxyNonDetachableBridge%?)*)"/><!--bigCapitalH before lambdaConvention is preferred. Expected ordering often varies between IUPAC/CAS/Beilstein so be lenient-->
  <regex name="%ringNonDetachableFeatures%" value="(((%bigCapitalH%|%lambdaConvention%|%heteroReplacement%|%fusedRingBridges%)%epoxyNonDetachableBridge%?)*%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes -->
  <regex name="%acyclicNonDetachableFeatures%" value="(%heteroReplacement%*%lambdaConvention%?%newLocantGroupNoStartingHyphen%?)"/><!--last locant is an indirect locant for suffixes-->


<!-- groups-->
  <!--acyclic-->

  <regex name="%heteroChain%" value = "((%multiplierNotGroup%%heteroStem%%unsaturationBlock%)|(%heteroStem%%hyphen%?%ane%))"/>
  <regex name="%alternatingHeteroChain%" value = "(%multiplierNotGroup%%hwHeteroAtom%{2,}%unsaturationBlock%)"/>

  <regex name="%straightChainGroups%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneStem%%a%?%unsaturationBlock%)"/>
  <regex name="%chainGroup%" value = "(%heteroChain%|%alternatingHeteroChain%|%alkaneStemModifier%?%alkaneStem%%a%?%unsaturationBlock%)"/>
  <regex name="%nitrogenChainSubstituent%" value = "(((%multiplierNotGroup%%nitrogenHeteroStem%%unsaturationBlock%)|(%nitrogenHeteroStem%%hyphen%?%ane%))%oMeaningYl%)"/>
  <regex name="%alkYlene%" value = "((%alkaneStemSystematic%%unsaturationBlock%?|%alkaneStemTrivial%%unsaturationBlock%)%optLocantGroupNoOMP%%ylene%)"/>
  <regex name="%chainSubstituent%" value = "(%chainGroup%%inlineEndings%|%alkaneStemModifier%?%alkaneStem%(%optLocantGroupNoOMP%|%a%%hyphen%?%locant%)%unlocantedInlineSuffixGroup%%repeatableInlineSuffixGroup%*|%nitrogenChainSubstituent%|%alkYlene%)"/>

  <regex name="%aminoMonoAcid%" value="(%dlStereochemistryPrefix%?((%aminoAcidEndsInIne%|%aminoAcidEndsInCompulsoryIne%)%ine%|%aminoAcidEndsInAn%%ane%))"/>
  <regex name="%aminoAcidSubstituentStem%" value="(%dlStereochemistryPrefix%?(%aminoAcidEndsInIne%%ine%?|%aminoAcidEndsInCompulsoryIne%%ine%|%aminoAcidEndsInAn%%ane%?|%aminoAcidEndsInIc%))"/>
  <regex name="%aminoAcidGroup%" value="(%aminoMonoAcid%%implicitIc%%inlineChargeSuffix%?|(%aminoMonoAcid%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%)(%infixedSuffix%|%rootSuffix%))"/>

  <regex name="%aminoAcidLocantedYl%" value ="((%aminoMonoAcid%%implicitIc%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%%rootSuffix%)%hyphen%?%locant%%locantedAminoAcidOrCarbohydrateYl%)"/>
  <regex name="%aminoAcidRadicalOnN%" value ="((%aminoMonoAcid%|%dlStereochemistryPrefix%?%aminoAcidEndsInIc%)%implicitIc%%oMeaningYl%)"/>
  <regex name="%aminoAcidSubstituent%" value="(%aminoAcidLocantedYl%|%aminoAcidRadicalOnN%|%aminoAcidSubstituentStem%(%infixedInlineSuffix%|%inlineSuffix%))"/>

  <regex name="%osUloseSuffix%" value="(%optLocantGroupNoOMP%%multiplier%?%carbohydrateOsUlSuffix%%ose%)"/>
  <regex name="%systematicCarbohydrateStem%" value="(%carbohydrateChain%(%a%?%unsaturation%+)?)"/>
  <regex name="%systematicAldoseCarbohydrateStem%" value="((%dlStereochemistryPrefix%?%carbohydrateConfigurationalPrefix%%hyphen%?)+%systematicCarbohydrateStem%)"/>
  <regex name="%casSystematicKetose%" value ="((%dlStereochemistryPrefix%?%carbohydrateConfigurationalPrefix%%hyphen%?)+%locant%%carbohydrateChain%%hyphen%?%carbohydrateUlSuffix%)"/>
  <regex name="%acyclicCarbohydrateStem%" value ="(%dlStereochemistryPrefix%?%trivialCarbohydrateStem%|%systematicAldoseCarbohydrateStem%(%o%?%optLocantGroupNoOMP%%multiplier%?%carbohydrateUlSuffix%)?|%casSystematicKetose%)"/>
  <regex name="%acyclicCarbohydrateAcid%" value="(%acyclicCarbohydrateStem%%o%?%hyphen%?%acyclicCarbohydrateAcidSuffix%)"/>
  <regex name="%acyclicCarbohydrateNonAcid%" value="(%acyclicCarbohydrateStem%%o%?%hyphen%?(%diald%?%ose%%osUloseSuffix%?|%itol%))"/>
  <regex name="%acyclicCarbohydrate%" value="(%acyclicCarbohydrateAcid%|%acyclicCarbohydrateNonAcid%)"/>
  <regex name="%acyclicCarbohydrateSubstituent%" value="(%acyclicCarbohydrateNonAcid%%hyphen%?%locant%%locantedAminoAcidOrCarbohydrateYl%|%acyclicCarbohydrateStem%%o%?%hyphen%?%acyclicCarbohydrateAcidInlineSuffix%)"/>

  <regex name="%nonCarbonAcidGroup%" value="((%monoNuclearNonCarbonAcid%|%nonCarbonAcidNoAcyl%)(%infixedSuffix%|%rootSuffix%))"/>
  <!--chalcogenAcidGroups must be substituted otherwise they are generic terms-->
  <regex name="%chalcogenAcidGroup%" value="(%chalcogenAcid%(%infixedSuffix%|%o%?%rootSuffix%))"/>
  <regex name="%nonCarbonAcidSubstituent%" value="(%monoNuclearNonCarbonAcid%(%infixedInlineSuffix%|%inlineSuffix%)|%chalcogenAcid%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%))"/>

  <!--e.g. this rule is specifically for lactam/lactones etc. with the 'o' before the locant. No attempt is made to indicate that they are cyclic as they are highly unlikely to be used in more complex ring nomenclature -->
  <regex name="%cycleFormingSuffixAlkane%" value="(%alkaneStem%%a%?%unsaturationBlock%%o%%optLocantGroupNoOMP%%cycleFormingSuffix%)"/>

  <regex name="%acidGroup%" value = "(%acidStem%(%infixedSuffix%|%o%?%rootSuffix%)|%aminoAcidGroup%|%nonCarbonAcidGroup%|%cycleFormingSuffixAlkane%)"/>
  <regex name="%acidSubstituent%" value = "(%acidStem%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%)|%aminoAcidSubstituent%|%nonCarbonAcidSubstituent%)"/>

  <regex name="%simpleSubstituents%" value = "(%simpleSubstituent%|%suffixableSubstituent%%inlineSuffixGroup%%repeatableInlineSuffixGroup%*|%acyclicCarbohydrateSubstituent%)"/>
  <regex name="%simpleGroups%" value = "(%simpleGroup%|%dlStereochemistryPrefix%?%canBeDlPrefixedSimpleGroup%|%acyclicCarbohydrate%)"/>


  <!--cyclic-->
  <regex name="%semiTrivialFusedRing%" value = "(%tetrOrHigher%%a%%FR2hydrocarbonComponent%)"/>
  <regex name="%vonBaeyerSystem%" value = "(%vonBaeyerMultiplier%%vonBaeyer%(%alkaneStem%%a%?%unsaturationBlock%|%heteroChain%))"/><!--support for alternating heteroChain missing-->
  <regex name="%cycloChain%" value = "(%cyclo%%straightChainGroups%)"/>
  <regex name="%cycloChainSubstituent%" value = "(%cyclo%%alkaneStem%)"/>
  <regex name="%spiroSystem%" value = "(%simpleMultiplierGroup%?%spiroDescriptor%%alkaneStem%%a%?%unsaturationBlock%)"/><!--support for heteroChain/alternating heteroChain missing-->
  <regex name="%hantzschWidmanRing%" value = "((%newLocantGroupNoStartingHyphen%|%bracketedLocant%)?((%multiplierNotGroup%?%hwHeteroAtom%)*((%multiplierNotGroup%?%hwAneCompatible%)%hwAne%)|(((%multiplierNotGroup%?%hwHeteroAtom%){2,}|(%multiplierNotGroup%?%hwIneCompatible%))%hwIne%)|((%multiplierNotGroup%?%hwHeteroAtom%)+%hantzschWidmanSuffix%)))"/>
  <regex name="%fusionComponent%" value = "(%fusionRing%|(%locantThatNeedsBrackets%|%bracketedLocant%)?%fusionRingAcceptsFrontLocants%|%benzo%|%cycloChainSubstituent%%a%?|%annulen%%o%|%semiTrivialFusedRing%%o%|%hantzschWidmanRing%%o%)"/>
  <regex name="%cyclicUnsaturableHydrocarbonGroup%" value = "(%cyclicUnsaturableHydrocarbon%%a%?%unsaturationBlock%)" />
  <regex name="%naturalProductGroup%" value = "(%naturalProductRequiresUnsaturator%%a%?%unsaturationBlock%)" />
  <regex name="%trivialRingSubstituentGroup%" value = "(%bracketedLocant%?%trivialRingSubstituentAnySuffix%%suffixGroup%)" />
  <regex name="%trivialRingSubstituentSub%" value = "(%bracketedLocant%?(%trivialRingSubstituentAnySuffix%|%trivialRingSubstituentInlineOnly%)%inlineSuffixGroup%|%trivialRingSubstituent%)" />
<!-- allows abbreviated alkanes e.g. bicyclo[2.2.2]octyl instead of bicyclo[2.2.2]octanyl-->
  <regex name="%vonBaeyerSystemSubstituent%" value = "(%vonBaeyerMultiplier%%vonBaeyer%%alkaneStem%)"/>
  <regex name="%spiroSystemSubstituent%" value = "(%simpleMultiplierGroup%?%spiroDescriptor%%alkaneStem%)"/>

  <regex name="%conjunctiveSideChainRoot%" value ="(%hyphen%?(%locant%|%alphaBetaStereochemLocant%)?%multiplier%?(%alkaneStem%%hyphen%?(%ane%%suffixGroup%|%ane%?%ylamine%)|%optionalOpenBracket%%alkaneStem%%hyphen%?%ane%?%ylamine%%optionalCloseBracket%|%acidStem%(%infixedSuffix%|%o%?%rootSuffix%)))"/>
  <regex name="%conjunctiveSideChainInline%" value ="(%multiplier%?(%acidStem%(%infixedInlineSuffix%|%inlineSuffix%|%o%%infixableInlineSuffix%)))"/><!--No hyphen/locant to avoid ambiguity with a mixture e.g. benzene-acetylbenzene-->

  <regex name="%systematicCyclicStemStereoPrefixes%" value="((%dlStereochemistryPrefix%?%carbohydrateConfigurationalPrefix%%hyphen%?)+(%locant%%dlStereochemistryPrefix%?%carbohydrateConfigurationalPrefix%%hyphen%?)?)"/>
  <regex name="%casSystematicCyclicKetose%" value ="(%systematicCyclicStemStereoPrefixes%%locant%%carbohydrateChain%%hyphen%?%carbohydrateUlSuffix%)"/>
  <regex name="%carbohydrateCyclicStem%" value="(%dlStereochemistryPrefix%?%trivialCarbohydrateStem%%diald%?|%systematicCyclicStemStereoPrefixes%%systematicCarbohydrateStem%(%o%?%optLocantGroupNoOMP%%multiplier%?%carbohydrateUlSuffix%|%diald%)?|%casSystematicCyclicKetose%)"/>
  <regex name="%carbohydrateRingSizedStem%" value="(%carbohydrateCyclicStem%%o%?%optLocantGroupNoOMP%?%carbohydrateRingSize%)"/>
  <regex name="%cyclicCarbohydrate%" value="(%carbohydrateRingSizedStem%(%ose%(%hyphen%?%glycosideSuffix%(%osUloseSuffix%|%cyclicCarbohydrateAcidSuffix%)?|%osUloseSuffix%)?|%ose%?%cyclicCarbohydrateAcidSuffix%))"/>

  <regex name="%unSpecifiedRingSizeSubstituent%" value="(%acyclicCarbohydrateStem%%o%?%ose%%glycosylSuffix%)"/>
  <regex name="%cyclicCarbohydrateSubstituentYl%" value="(%carbohydrateRingSizedStem%%ose%(%hyphen%?%glycosideSuffix%)?%osUloseSuffix%?%hyphen%?%locant%%locantedAminoAcidOrCarbohydrateYl%)"/>
  <regex name="%cyclicCarbohydrateSubstituentGylcosyl%" value="(%carbohydrateRingSizedStem%%ose%%glycosylSuffix%(%osUloseSuffix%|%cyclicCarbohydrateAcidSuffix%))"/>
  <regex name="%cyclicCarbohydrateSubstituentEndingInGlycosyl%" value="(%carbohydrateRingSizedStem%%uron%?%ose%%osUloseSuffix%?%glycosylSuffix%)"/>
  <regex name="%cyclicCarbohydrateSubstituent%" value="(%unSpecifiedRingSizeSubstituent%|%cyclicCarbohydrateSubstituentYl%|(%cyclicCarbohydrateSubstituentGylcosyl%|%cyclicCarbohydrateSubstituentEndingInGlycosyl%)(%closeBracket%?%hyphen%?%carbohydrateLocant%)?)"/>

  <!--Fused ring terms-->
  <regex name="%benzoComponent%" value ="((%bracketedLocant%|%locant%)%benzo%)"/>
  <regex name="%simpleComponent%" value ="(%fusionComponent%%hyphen%?%fusionBracket%?%hyphen%?|%benzoComponent%)" />
  <regex name="%multipliedComponent%" value ="(%multiplier%(%fusionComponent%%hyphen%?%multipleFusor%?%hyphen%?|%benzoComponent%))" />
  <regex name="%multipliedParent%" value ="(%fusionComponent%%hyphen%?%multipleFusor%?%hyphen%?%multiplier%)"/>
  <regex name="%fusedRingSystemFromTrivialRingSubstituent%" value = "((%simpleComponent%|%multipliedComponent%|%multipliedParent%)+%trivialRingSubstituentSub%)"/>

  <!--Complex terms-->
  <regex name="%ringGroup%" value = "((%semiTrivialFusedRing%|%hantzschWidmanRing%|%annulen%|(%locant%|%bracketedLocant%)?%trivialRing%)%e%?|%vonBaeyerSystem%|%spiroSystem%|%trivialRingSubstituentGroup%|%cycloChain%|%cyclicUnsaturableHydrocarbonGroup%|%naturalProductGroup%)"/>
  <regex name="%preSuffixedRing%" value = "(%cyclicCarbohydrate%|%simpleCyclicGroup%)"/>
  <regex name="%irregularRingSubstituentStem%" value="(%vonBaeyerSystemSubstituent%|%cycloChainSubstituent%|%spiroSystemSubstituent%|%cyclicUnsaturableHydrocarbon%%a%?)"/>
  <regex name="%ringSubstituent%" value = "((%ringGroup%|%irregularRingSubstituentStem%)(%inlineEndings%|%conjunctiveSideChainInline%)|%trivialRingSubstituentSub%|%fusedRingSystemFromTrivialRingSubstituent%|%cyclicCarbohydrateSubstituent%)"/>

  <regex name="%fusedRingSystem%" value = "((%simpleComponent%|%multipliedComponent%|%multipliedParent%)+(%ringGroup%|%preSuffixedRing%))"/>

  <regex name="%polycyclicSpiroOldMethod%" value="(%ringNonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%?(%hyphen%?%locant%?%spiroOldMethod%%locant%?(%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%?|%optionalOpenBracket%%locant%?%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%?%optionalCloseBracket%))+)"/>
  <regex name="%vonBaeyerForSpiro%" value="(%structuralOpenBracket%%vonBaeyerMultiplier%%vonBaeyer%(%alkaneStem%|%multiplierNotGroup%%heteroStem%)%ane%%structuralCloseBracket%%unsaturation%+)" />
  <regex name="%polycyclicSpiroIdenticalComponents%" value ="(%symPolycylicSpiro%((%ringGroup%|%fusedRingSystem%)|%structuralOpenBracket%%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%structuralCloseBracket%|%vonBaeyerForSpiro%))"/>
  <regex name="%polycyclicSpiroContents%" value="(%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)(%hyphen%?%spiroLocant%((%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%))|(%optionalOpenBracket%%ring_CanStartWithHydro_NonDetachableFeatures%(%ringGroup%|%fusedRingSystem%)%optionalCloseBracket%)))+)" />
  <regex name="%polycyclicSpiro%" value ="(%simpleMultiplier%?%spiro%%structuralOpenBracket%%polycyclicSpiroContents%%structuralCloseBracket%)"/>
  <regex name="%polycyclicSpiroGroup%" value ="(%polycyclicSpiroIdenticalComponents%|%polycyclicSpiro%|%polycyclicSpiroOldMethod%)" />

  <regex name="%ringAssemblyConjunctive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?((%ringGroup%|%fusedRingSystem%)%rootEnding%|%preSuffixedRing%))" />
  <regex name="%ringAssemblyAdditive%" value = "(%ring_CanStartWithHydro_NonDetachableFeatures%?(%trivialRingSubstituentSub%|%fusedRingSystemFromTrivialRingSubstituent%|%irregularRingSubstituentStem%%optLocantGroupNoOMP%%repeatableInlineSuffix%|(%ringGroup%|%fusedRingSystem%)%inlineChargeGroup%?%optLocantGroupNoOMP%%repeatableInlineSuffix%))" />
  <regex name="%ringAssemblyRing%" value = "(%ringAssemblyConjunctive%|%ringAssemblyAdditive%)" />
  <regex name="%locantForRingAssembly%" value = "(%colonSeperatedLocant%|%newLocantGroupNoStartingHyphen%|%optionalOpenBracket%(%colonSeperatedLocant%|%locant%)%optionalCloseBracket%%hyphen%?)" />
  <regex name="%ringAssembly%" value = "(%locantForRingAssembly%?%ringAssemblyMultiplier%%hyphen%?(%ringAssemblyRing%|%structuralOpenBracket%%ringAssemblyRing%%structuralCloseBracket%))"/>

  <regex name="%allRingSubstituents%" value = "(%ringSubstituent%|((%ringAssembly%|%structuralOpenBracket%%ringAssembly%%structuralCloseBracket%)|%fusedRingSystem%|%polycyclicSpiroGroup%)(%inlineEndings%|%conjunctiveSideChainInline%))"/>
  <regex name="%allOtherSubstituents%" value = "(%simpleSubstituents%|%chainSubstituent%|%acidSubstituent%|(%groupStemAllowingInlineSuffixes%|%groupStemAllowingAllSuffixes%)%e%?%inlineEndings%)"/>
  <regex name="%subsituentBody%" value= "(%ringNonDetachableFeatures%%allRingSubstituents%|%acyclicNonDetachableFeatures%%allOtherSubstituents%)"/>
  <regex name="%amineMeaningNitriloSubstituent%" value = "(%openBracket%*%multiplier%%openBracket%*%amineMeaningNitrilo%%closeBracket%*%interSubstituentHyphen%?)"/><!--needed to avoid "amine" being parsed as a substituent-->
  <regex name="%substituent%" value= "((%locantOpenBracket%*%newLocantGroupNoStartingHyphen%?%stereochemistry%*(%relativeCisTrans%|%newLocantGroupNoStartingHyphen%)?(%multiplier%|%groupMultiplier%%hyphen%?%simpleMultiplier%)?(%subsituentBody%%closeBracket%*%interSubstituentHyphen%?|%hydroGroup%)|%amineMeaningNitriloSubstituent%)%endOfSubstituent%)"/>

  <regex name="%allRingGroups%" value = "((%ringGroup%|%ringAssembly%|%structuralOpenBracket%%ringAssembly%%structuralCloseBracket%|%fusedRingSystem%|%polycyclicSpiroGroup%)(%rootEnding%|%conjunctiveSideChainRoot%)|%preSuffixedRing%)"/>
  <regex name="%allOtherSuffixableGroups%" value = "((%groupStemAllowingAllSuffixes%%e%?|%chainGroup%)%rootEnding%|%acidGroup%|%groupStemAllowingInlineSuffixes%%e%?%inlineChargeGroup%?)"/>
  <regex name="%mainGroupBody%" value="(%ringNonDetachableFeatures%%allRingGroups%|%acyclicNonDetachableFeatures%(%allOtherSuffixableGroups%|%simpleGroups%|%elementaryAtom%%chargeOrOxidationNumberSpecifier%?))"/>
  <regex name="%mainGroupHead%" value="(%openBracket%?%multiplier%?%openBracket%?%stereochemistry%*(%newLocantGroupNoStartingHyphen%%mono%?)?)" />
  <regex name="%mainGroupTail%" value="(%closeBracket%*%endOfMainGroup%)" />
  <regex name="%mainGroup%" value="(%mainGroupHead%%mainGroupBody%%mainGroupTail%)"/>
  <regex name="%mainGroupThatRequiresSubstituent%" value="(%mainGroupHead%(%chalcogenAcidGroup%|%simpleGroupClass%)%mainGroupTail%)"/>

<!-- functional Groups-->
  <regex name="%anhydride%" value="((%locant%|%colonSeperatedLocant%)?%multiplier%?(%anhydrideFunctionalGroup%|%openBracket%%anhydrideFunctionalGroup%%closeBracket%))"/>
  <regex name="%acetal%" value="(%simpleMultiplier%?%chalcogenReplacement%{0,2}%acetalClass%)" />
  <regex name="%functionalClass%" value ="(%locant%?%simpleMultiplierGroup%?%multiplyableFunctionalClass%%closeBracket%?|%acetal%|%anhydride%|%basicFunctionalClass%)"/>
  <regex name="%functionalGroup%" value ="(%multiplier%?(%monovalentFunctionalGroup%|%standaloneMonovalentFunctionalGroup%)|%divalentFunctionalGroup%)"/>
  <regex name="%functionalTerm%" value="((%functionalClass%|%functionalGroup%)%endOfFunctionalGroup%)"/>

  <regex name="%chemical%" value="((%functionalModifier%%endOfFunctionalGroup%)?(%substituent%+%functionalTerm%?|(%substituent%*%mainGroup%|%substituent%+%mainGroupThatRequiresSubstituent%)(%hyphen%?%functionalTerm%)?)|%hyphen%?%functionalTerm%)"/>
<!--Note that the %functionalTerm%? in the term above indicates that a space has technically been omitted!-->
</regexes>